basePath: '{{.BasePath}}'
definitions:
  Connection:
    properties:
      id:
        description: Connection id
        type: string
      spec:
        $ref: '#/definitions/ConnectionSpec'
        description: Connection specification
        type: object
      status:
        $ref: '#/definitions/ConnectionStatus'
        description: Connection status
        type: object
    type: object
  ModelDeployment:
    properties:
      id:
        description: Model deployment id
        type: string
      spec:
        $ref: '#/definitions/ModelDeploymentSpec'
        description: Model deployment specification
        type: object
      status:
        $ref: '#/definitions/ModelDeploymentStatus'
        description: Model deployment status
        type: object
    type: object
  ModelRoute:
    properties:
      id:
        description: Model route id
        type: string
      spec:
        $ref: '#/definitions/ModelRouteSpec'
        description: Model route specification
        type: object
      status:
        $ref: '#/definitions/ModelRouteStatus'
        description: Model route status
        type: object
    type: object
  TokenRequest:
    properties:
      expiration_date:
        description: Explicitly set expiration date for token
        type: string
      role_name:
        description: Role name
        type: string
    type: object
  TokenResponse:
    properties:
      token:
        type: string
    type: object
  JsonSchema:
    properties:
      properties:
        description: Properties configuration
        items:
          $ref: '#/definitions/Property'
        type: array
      required:
        description: List of required properties
        items:
          type: string
        type: array
    type: object
  K8sPackager:
    properties:
      modelHolder:
        $ref: '#/definitions/Connection'
        description: Connection where a trained model artifact is stored
        type: object
      modelPackaging:
        $ref: '#/definitions/ModelPackaging'
        description: Model Packaging
        type: object
      packagingIntegration:
        $ref: '#/definitions/PackagingIntegration'
        description: Packaging integration
        type: object
      targets:
        description: List of targets with appropriate connections
        items:
          $ref: '#/definitions/PackagerTarget'
        type: array
      trainingZipName:
        description: Name of trained model artifact name
        type: string
    type: object
  ModelPackaging:
    properties:
      id:
        description: Model packaging id
        type: string
      spec:
        $ref: '#/definitions/ModelPackagingSpec'
        description: Model packaging specification
        type: object
      status:
        $ref: '#/definitions/ModelPackagingStatus'
        description: Model packaging status
        type: object
    type: object
  ModelPackagingSpec:
    properties:
      arguments:
        description: List of arguments. This parameter depends on the specific packaging
          integration
        type: object
      artifactName:
        description: Training output artifact name
        type: string
      image:
        description: Image name. Packaging integration image will be used if this
          parameters is missed
        type: string
      integrationName:
        description: Packaging integration ID
        type: string
      targets:
        description: List of targets. This parameter depends on the specific packaging
          integration
        items:
          $ref: '#/definitions/Target'
        type: array
    type: object
  PackagerTarget:
    properties:
      connection:
        $ref: '#/definitions/Connection'
        description: A Connection for this target
        type: object
      name:
        description: Target name
        type: string
    type: object
  PackagingIntegration:
    properties:
      id:
        description: Packaging integration id
        type: string
      spec:
        $ref: '#/definitions/PackagingIntegrationSpec'
        description: Packaging integration specification
        type: object
      status:
        $ref: '#/definitions/PackagingIntegrationStatus'
        description: Packaging integration status
        type: object
    type: object
  PackagingIntegrationSpec:
    properties:
      defaultImage:
        description: Default packaging Docker image
        type: string
      entrypoint:
        description: Path to binary which starts a packaging process
        type: string
      privileged:
        description: Enable docker privileged flag
        type: boolean
      schema:
        $ref: '#/definitions/Schema'
        description: Schema which describes targets and arguments for specific packaging
          integration
        type: object
    type: object
  Parameter:
    properties:
      name:
        description: Parameter name
        type: string
      value:
        description: Parameter value
        type: object
    type: object
  Property:
    properties:
      name:
        description: Property name
        type: string
      parameters:
        description: List of property parameters
        items:
          $ref: '#/definitions/Parameter'
        type: array
    type: object
  Schema:
    properties:
      arguments:
        $ref: '#/definitions/JsonSchema'
        description: Arguments schema
        type: object
      targets:
        description: Targets schema
        items:
          $ref: '#/definitions/TargetSchema'
        type: array
    type: object
  HTTPResult:
    properties:
      message:
        description: Success of error message
        type: string
    type: object
  InputDataBindingDir:
    properties:
      dataBinding:
        $ref: '#/definitions/ConnectionSpec'
        description: Connection specific for data
        type: object
      localPath:
        description: Local path
        type: string
      remotePath:
        description: Remote path
        type: string
    type: object
  K8sTrainer:
    properties:
      inputData:
        description: Connection for training data
        items:
          $ref: '#/definitions/InputDataBindingDir'
        type: array
      modelTraining:
        $ref: '#/definitions/ModelTraining'
        description: Model training
        type: object
      outputConn:
        $ref: '#/definitions/Connection'
        description: Connection for trained model artifact
        type: object
      toolchainIntegration:
        $ref: '#/definitions/ToolchainIntegration'
        description: Toolchain integration
        type: object
      vcs:
        $ref: '#/definitions/Connection'
        description: Connection for source code
        type: object
    type: object
  ModelTraining:
    properties:
      id:
        description: Model training ID
        type: string
      spec:
        $ref: '#/definitions/ModelTrainingSpec'
        description: Model training specification
        type: object
      status:
        $ref: '#/definitions/ModelTrainingStatus'
        description: Model training status
        type: object
    type: object
  ToolchainIntegration:
    properties:
      id:
        description: Toolchain integration id
        type: string
      spec:
        $ref: '#/definitions/ToolchainIntegrationSpec'
        description: Toolchain integration specification
        type: object
      status:
        $ref: '#/definitions/ToolchainIntegrationStatus'
        description: Toolchain integration status
        type: object
    type: object
  ConnectionSpec:
    properties:
      keyID:
        description: Key ID
        type: string
      keySecret:
        description: Ssh or service account secret
        type: string
      password:
        description: Password
        type: string
      publicKey:
        description: Ssh public key
        type: string
      reference:
        description: VCS reference
        type: string
      region:
        description: AWS region or GCP project
        type: string
      role:
        description: Service account role
        type: string
      type:
        description: |-
          Required value. Available values:
            * s3
            * gcs
            * git
            * docker
        type: string
      uri:
        description: URI. It is required value
        type: string
      username:
        description: Username
        type: string
    type: object
  ConnectionStatus:
    properties:
      secretName:
        description: Kubernetes secret name
        type: string
      serviceAccount:
        description: Kubernetes service account
        type: string
    type: object
  DataBindingDir:
    properties:
      connName:
        description: Connection name for data
        type: string
      localPath:
        description: Local training path
        type: string
      remotePath:
        description: Overwrite remote data path in connection
        type: string
    type: object
  EnvironmentVariable:
    properties:
      name:
        description: Name of an environment variable
        type: string
      value:
        description: Value of an environment variable
        type: string
    type: object
  ModelDeploymentSpec:
    properties:
      annotations:
        description: Annotations for model pods.
        type: object
      image:
        description: Model Docker image
        type: string
      livenessProbeInitialDelay:
        description: Initial delay for liveness probe of model pod
        type: integer
      maxReplicas:
        description: Maximum number of pods for model. By default the max replicas
          parameter equals 1.
        type: integer
      minReplicas:
        description: Minimum number of pods for model. By default the min replicas
          parameter equals 0.
        type: integer
      readinessProbeInitialDelay:
        description: Initial delay for readiness probe of model pod
        type: integer
      resources:
        $ref: '#/definitions/ResourceRequirements'
        description: |-
          Resources for model deployment
          The same format like k8s uses for pod resources.
        type: object
      roleName:
        description: Initial delay for readiness probe of model pod
        type: string
    type: object
  ModelDeploymentStatus:
    properties:
      availableReplicas:
        description: Number of available pods
        type: integer
      deployment:
        description: The model k8s deployment name
        type: string
      lastRevisionName:
        description: Last applied ready knative revision
        type: string
      replicas:
        description: Expected number of pods under current load
        type: integer
      service:
        description: The model k8s service name
        type: string
      serviceURL:
        description: The model k8s service name
        type: string
      state:
        description: |-
          The state of a model 
            "Processing" - A model was not deployed. Because some parameters of the
                           custom resource are wrong. For example, there is not a model
                           image in a Docker registry.
            "Ready" - A model was deployed successfully.
        type: string
    type: object
  ModelDeploymentTarget:
    properties:
      mdName:
        description: Model Deployment name
        type: string
      weight:
        description: The proportion of traffic to be forwarded to the Model Deployment.
        type: integer
    type: object
  ModelIdentity:
    properties:
      artifactNameTemplate:
        description: Template of output artifact name
        type: string
      name:
        description: Model name
        type: string
      version:
        description: Model version
        type: string
    type: object
  ModelPackagingResult:
    properties:
      name:
        description: Name of a result. It can be docker image, path to s3 artifact
          and so on
        type: string
      value:
        description: Specific value
        type: string
    type: object
  ModelPackagingStatus:
    properties:
      exitCode:
        description: Pod exit code
        type: integer
      message:
        description: Pod last log
        type: string
      reason:
        description: Pod reason
        type: string
      results:
        description: List of packaing results
        items:
          $ref: '#/definitions/ModelPackagingResult'
        type: array
      state:
        description: Model Packaging State
        type: string
    type: object
  ModelRouteSpec:
    properties:
      mirror:
        description: |-
          Mirror HTTP traffic to a another Model deployment in addition to forwarding
          the requests to the model deployments.
        type: string
      modelDeployments:
        description: A http rule can forward traffic to Model Deployments.
        items:
          $ref: '#/definitions/ModelDeploymentTarget'
        type: array
      urlPrefix:
        description: |-
          Url prefix for model  For example: /custom/test
          Prefix must start with slash
          "/feedback" and "/model" are reserved for internal usage
        type: string
    type: object
  ModelRouteStatus:
    properties:
      edgeUrl:
        description: Full url with prefix to a model deployment service
        type: string
      state:
        description: State of Model Route
        type: string
    type: object
  ModelTrainingSpec:
    properties:
      args:
        items:
          type: string
        type: array
      data:
        description: Input data for a training
        items:
          $ref: '#/definitions/DataBindingDir'
        type: array
      entrypoint:
        description: Model training file. It can be python\bash script or jupiter
          notebook
        type: string
      envs:
        description: Custom environment variables that should be set before entrypoint
          invocation.
        items:
          $ref: '#/definitions/EnvironmentVariable'
        type: array
      hyperParameters:
        description: Model training hyperParameters in parameter:value format
        type: object
      image:
        description: Train image
        type: string
      model:
        $ref: '#/definitions/ModelIdentity'
        description: Model Identity
        type: object
      reference:
        description: VCS Reference
        type: string
      resources:
        $ref: '#/definitions/ResourceRequirements'
        description: |-
          Resources for model container
          The same format like k8s uses for pod resources.
        type: object
      toolchain:
        description: IntegrationName of toolchain
        type: string
      vcsName:
        description: Name of Connection resource. Must exists
        type: string
      workDir:
        description: Directory with model scripts/files in a git repository
        type: string
    type: object
  ModelTrainingStatus:
    properties:
      artifacts:
        description: List of training results
        items:
          $ref: '#/definitions/TrainingResult'
        type: array
      exitCode:
        description: Pod exit code
        type: integer
      message:
        description: Pod last log
        type: string
      reason:
        description: Pod reason
        type: string
      state:
        description: Model Packaging State
        type: string
    type: object
  PackagingIntegrationStatus:
    type: object
  ResourceList:
    properties:
      cpu:
        description: Read more about CPU resource here https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#meaning-of-cpu
        type: string
      gpu:
        description: Read more about GPU resource here https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/#using-device-plugins
        type: string
      memory:
        description: Read more about memory resource here https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#meaning-of-memory
        type: string
    type: object
  ResourceRequirements:
    properties:
      limits:
        $ref: '#/definitions/ResourceList'
        description: Limits describes the maximum amount of compute resources allowed.
        type: object
      requests:
        $ref: '#/definitions/ResourceList'
        description: Requests describes the minimum amount of compute resources required.
        type: object
    type: object
  Target:
    properties:
      connectionName:
        type: string
      name:
        type: string
    type: object
  TargetSchema:
    properties:
      connectionTypes:
        items:
          type: string
        type: array
      name:
        type: string
      required:
        type: boolean
    type: object
  ToolchainIntegrationSpec:
    properties:
      additionalEnvironments:
        description: Additional environments for a training process
        type: object
      defaultImage:
        description: Default training Docker image
        type: string
      entrypoint:
        description: Path to binary which starts a training process
        type: string
    type: object
  ToolchainIntegrationStatus:
    type: object
  TrainingResult:
    properties:
      artifactName:
        description: Trained artifact name
        type: string
      commitID:
        description: VCS commit
        type: string
      runId:
        description: Mlflow run ID
        type: string
    type: object
host: '{{.Host}}'
info:
  contact: {}
  description: This is a EDI server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: EDI API
  version: "1.0"
paths:
  /api/v1/connection:
    get:
      consumes:
      - application/json
      description: Get list of Connections
      parameters:
      - description: Toolchain
        in: path
        name: type
        type: string
      - description: Number of entities in a response
        in: path
        name: size
        type: integer
      - description: Number of a page
        in: path
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Connection'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Get list of Connections
      tags:
      - Connection
    post:
      consumes:
      - application/json
      description: Create a Connection. Results is created Connection.
      parameters:
      - description: Create a Connection
        in: body
        name: connection
        required: true
        schema:
          $ref: '#/definitions/Connection'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Connection'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Create a Connection
      tags:
      - Connection
    put:
      consumes:
      - application/json
      description: Update a Connection. Results is updated Connection.
      parameters:
      - description: Update a Connection
        in: body
        name: connection
        required: true
        schema:
          $ref: '#/definitions/Connection'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Update a Connection
      tags:
      - Connection
  /api/v1/connection/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Connection by id
      parameters:
      - description: Connection id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Delete a Connection
      tags:
      - Connection
    get:
      consumes:
      - application/json
      description: Get a Connection by id
      parameters:
      - description: Connection id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Connection'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Get a Connection
      tags:
      - Connection
  /api/v1/model/deployment:
    get:
      consumes:
      - application/json
      description: Get list of Model deployments
      parameters:
      - description: Number of entities in a response
        in: path
        name: size
        type: integer
      - description: Number of a page
        in: path
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ModelDeployment'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Get list of Model deployments
      tags:
      - Deployment
    post:
      consumes:
      - application/json
      description: Create a Model  Results is created Model
      parameters:
      - description: Create a Model deployment
        in: body
        name: md
        required: true
        schema:
          $ref: '#/definitions/ModelDeployment'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ModelDeployment'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Create a Model deployment
      tags:
      - Deployment
    put:
      consumes:
      - application/json
      description: Update a Model  Results is updated Model
      parameters:
      - description: Update a Model deployment
        in: body
        name: md
        required: true
        schema:
          $ref: '#/definitions/ModelDeployment'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ModelDeployment'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Update a Model deployment
      tags:
      - Deployment
  /api/v1/model/deployment/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Model deployment by id
      parameters:
      - description: Model deployment id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Delete a Model deployment
      tags:
      - Deployment
    get:
      consumes:
      - application/json
      description: Get a Model deployment by id
      parameters:
      - description: Model deployment id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ModelDeployment'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Get a Model deployment
      tags:
      - Deployment
  /api/v1/model/jwks:
    get:
      description: Retrieve model jwks for model services
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TokenResponse'
            type: object
      summary: Retrieve model jwks
      tags:
      - JWT
  /api/v1/model/packaging:
    get:
      consumes:
      - application/json
      description: Get list of Model Packagings
      parameters:
      - description: Number of entities in a response
        in: path
        name: size
        type: integer
      - description: Number of a page
        in: path
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ModelPackaging'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Get list of Model Packagings
      tags:
      - Packaging
    post:
      consumes:
      - application/json
      description: Create a Model Packaging. Results is created Model Packaging.
      parameters:
      - description: Create a Model Packaging
        in: body
        name: MP
        required: true
        schema:
          $ref: '#/definitions/ModelPackaging'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ModelPackaging'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Create a Model Packaging
      tags:
      - Packaging
    put:
      consumes:
      - application/json
      description: Update a Model Packaging. Results is updated Model Packaging.
      parameters:
      - description: Update a Model Packaging
        in: body
        name: MP
        required: true
        schema:
          $ref: '#/definitions/ModelPackaging'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ModelPackaging'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Update a Model Packaging
      tags:
      - Packaging
  /api/v1/model/packaging/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Model Packaging by id
      parameters:
      - description: Model Packaging id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Delete a Model Packaging
      tags:
      - Packaging
    get:
      consumes:
      - application/json
      description: Get a Model Packaging by id
      parameters:
      - description: Model Packaging id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ModelPackaging'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Get a Model Packaging
      tags:
      - Packaging
  /api/v1/model/packaging/{id}/log:
    get:
      consumes:
      - text/plain
      description: Stream logs from model packaging pod
      parameters:
      - description: follow logs
        in: query
        name: follow
        type: boolean
      - description: Model Packaging id
        in: path
        name: id
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Stream logs from model packaging pod
      tags:
      - Packaging
  /api/v1/model/route:
    get:
      consumes:
      - application/json
      description: Get list of Model routes
      parameters:
      - description: Number of entities in a response
        in: path
        name: size
        type: integer
      - description: Number of a page
        in: path
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ModelRoute'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Get list of Model routes
      tags:
      - Route
    post:
      consumes:
      - application/json
      description: Create a Model route. Results is created Model route.
      parameters:
      - description: Create a Model route
        in: body
        name: mr
        required: true
        schema:
          $ref: '#/definitions/ModelRoute'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ModelRoute'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Create a Model route
      tags:
      - Route
    put:
      consumes:
      - application/json
      description: Update a Model route. Results is updated Model route.
      parameters:
      - description: Update a Model route
        in: body
        name: mr
        required: true
        schema:
          $ref: '#/definitions/ModelRoute'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ModelRoute'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Update a Model route
      tags:
      - Route
  /api/v1/model/route/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Model route by id
      parameters:
      - description: Model route id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Delete a Model route
      tags:
      - Route
    get:
      consumes:
      - application/json
      description: Get a Model route by id
      parameters:
      - description: Model route id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ModelRoute'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Get a Model route
      tags:
      - Route
  /api/v1/model/token:
    post:
      consumes:
      - application/json
      description: Create a JWT token for access to the model service
      parameters:
      - description: Create a model JWT token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/TokenRequest'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/TokenResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Create a model JWT token
      tags:
      - JWT
  /api/v1/model/training:
    get:
      consumes:
      - application/json
      description: Get list of Model Trainings
      parameters:
      - description: Number of entities in a response
        in: path
        name: size
        type: integer
      - description: Number of a page
        in: path
        name: page
        type: integer
      - description: Model name
        in: path
        name: model_name
        type: integer
      - description: Model version
        in: path
        name: model_version
        type: integer
      - description: Toolchain name
        in: path
        name: toolchain
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ModelTraining'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Get list of Model Trainings
      tags:
      - Training
    post:
      consumes:
      - application/json
      description: Create a Model Training. Results is created Model Training.
      parameters:
      - description: Create a Model Training
        in: body
        name: mt
        required: true
        schema:
          $ref: '#/definitions/ModelTraining'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ModelTraining'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Create a Model Training
      tags:
      - Training
    put:
      consumes:
      - application/json
      description: Update a Model Training. Results is updated Model Training.
      parameters:
      - description: Update a Model Training
        in: body
        name: mt
        required: true
        schema:
          $ref: '#/definitions/ModelTraining'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ModelTraining'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Update a Model Training
      tags:
      - Training
  /api/v1/model/training/{id}:
    delete:
      consumes:
      - application/json
      description: Get a Model Training by id
      parameters:
      - description: Model Training id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Get a Model Training
      tags:
      - Training
    get:
      consumes:
      - application/json
      description: Get a Model Training by id
      parameters:
      - description: Model Training id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ModelTraining'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Get a Model Training
      tags:
      - Training
  /api/v1/model/training/{id}/log:
    get:
      consumes:
      - text/plain
      description: Stream logs from model training pod
      parameters:
      - description: follow logs
        in: query
        name: follow
        type: boolean
      - description: Model Training id
        in: path
        name: id
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Stream logs from model training pod
      tags:
      - Training
  /api/v1/packaging/integration:
    get:
      consumes:
      - application/json
      description: Get list of PackagingIntegrations
      parameters:
      - description: Number of entities in a response
        in: path
        name: size
        type: integer
      - description: Number of a page
        in: path
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/PackagingIntegration'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Get list of PackagingIntegrations
      tags:
      - Packager
    post:
      consumes:
      - application/json
      description: Create a PackagingIntegration. Results is created PackagingIntegration.
      parameters:
      - description: Create a PackagingIntegration
        in: body
        name: ti
        required: true
        schema:
          $ref: '#/definitions/PackagingIntegration'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/PackagingIntegration'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Create a PackagingIntegration
      tags:
      - Packager
    put:
      consumes:
      - application/json
      description: Update a PackagingIntegration. Results is updated PackagingIntegration.
      parameters:
      - description: Update a PackagingIntegration
        in: body
        name: pi
        required: true
        schema:
          $ref: '#/definitions/PackagingIntegration'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/PackagingIntegration'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Update a PackagingIntegration
      tags:
      - Packager
  /api/v1/packaging/integration/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a PackagingIntegration by id
      parameters:
      - description: PackagingIntegration id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Delete a PackagingIntegration
      tags:
      - Packager
    get:
      consumes:
      - application/json
      description: Get a PackagingIntegration by id
      parameters:
      - description: PackagingIntegration id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/PackagingIntegration'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Get a PackagingIntegration
      tags:
      - Packager
  /api/v1/toolchain/integration:
    get:
      consumes:
      - application/json
      description: Get list of ToolchainIntegrations
      parameters:
      - description: Number of entities in a response
        in: path
        name: size
        type: integer
      - description: Number of a page
        in: path
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ToolchainIntegration'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Get list of ToolchainIntegrations
      tags:
      - Toolchain
    post:
      consumes:
      - application/json
      description: Create a ToolchainIntegration. Results is created ToolchainIntegration.
      parameters:
      - description: Create a ToolchainIntegration
        in: body
        name: ti
        required: true
        schema:
          $ref: '#/definitions/ToolchainIntegration'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ToolchainIntegration'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Create a ToolchainIntegration
      tags:
      - Toolchain
    put:
      consumes:
      - application/json
      description: Update a ToolchainIntegration. Results is updated ToolchainIntegration.
      parameters:
      - description: Update a ToolchainIntegration
        in: body
        name: ti
        required: true
        schema:
          $ref: '#/definitions/ToolchainIntegration'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ToolchainIntegration'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Update a ToolchainIntegration
      tags:
      - Toolchain
  /api/v1/toolchain/integration/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a ToolchainIntegration by id
      parameters:
      - description: ToolchainIntegration id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Delete a ToolchainIntegration
      tags:
      - Toolchain
    get:
      consumes:
      - application/json
      description: Get a ToolchainIntegration by id
      parameters:
      - description: ToolchainIntegration id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ToolchainIntegration'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPResult'
            type: object
      summary: Get a ToolchainIntegration
      tags:
      - Toolchain
swagger: "2.0"

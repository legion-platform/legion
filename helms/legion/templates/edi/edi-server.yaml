{{- if .Values.edi.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-edi"
  labels:
    component: "{{ .Release.Name }}-edi"
    {{- include "legion.helm-labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.edi.replicas }}
  selector:
    matchLabels:
      component: "{{ .Release.Name }}-edi"
  template:
    metadata:
      labels:
        component: "{{ .Release.Name }}-edi"
        {{- include "legion.helm-labels" . | nindent 8 }}
    spec:
      {{- if .Values.rbac}}
      serviceAccountName: "{{ .Release.Name }}-edi"
      {{- end}}
      volumes:
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
      - name: cluster-secrets
        secret:
          secretName: "{{ .Release.Name }}-cluster-secrets"
      - name: jwt-config
        secret:
          secretName: "{{ .Release.Name }}-jwt-config"
      containers:
      - name: edi
        image: "{{ ternary $.Values.edi.customImage (printf "%s/edi:%s" $.Values.imagesRegistry (include "legion.application-version" .)) (hasKey $.Values.edi "customImage") }}"
        resources:
          requests:
            cpu: {{ .Values.edi.resources.requests.cpu | quote }}
            memory: {{ .Values.edi.resources.requests.memory | quote }}
          limits:
            cpu: {{ .Values.edi.resources.limits.cpu | quote }}
            memory: {{ .Values.edi.resources.limits.memory | quote }}
        env:
        - name: DEPLOYMENT
          value: "{{ .Release.Name }}"
        - name: NAMESPACE
          value: "{{ .Release.Namespace }}"
        - name: LEGION_API_ADDR
          value: "0.0.0.0"
        - name: LEGION_API_PORT
          value: "5000"
        - name: VERBOSE
          value: "1"
        {{- if .Values.rbac}}
        - name: DOCKER_REGISTRY
          value: "TODO: REPLACE"
        - name: DOCKER_REGISTRY_PROTOCOL
          value: "TODO: REPLACE"
        - name: DOCKER_REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-cluster-secrets
              key: docker.user
        - name: DOCKER_REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-cluster-secrets
              key: docker.password
        {{- end}}
        - name: K8S_API_RETRY_NUMBER_MAX_LIMIT
          value: "{{ .Values.edi.k8sApiRetryNumberMaxLimit }}"
        - name: K8S_API_RETRY_DELAY_SEC
          value: "{{ .Values.edi.k8sApiRetryDelaySec }}"
        {{- if .Values.metrics.enabled }}
        - name: MODEL_TRAIN_METRICS_ENABLED
          value: "true"
        - name: METRICS_HOST
          value: "{{ .Values.metrics.statsd.host }}"
        - name: METRICS_PORT
          value: "{{ .Values.metrics.statsd.port }}"
        {{- else -}}
        - name: MODEL_TRAIN_METRICS_ENABLED
          value: "false"
        {{- end }}}}
        - name: MODEL_K8S_MEMORY
          value: "{{ .Values.modelExecution.limits.mem }}"
        - name: MODEL_K8S_CPU
          value: "{{ .Values.modelExecution.limits.cpu }}"
        volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-socket
        - mountPath: /opt/legion/secrets
          name: cluster-secrets
          readOnly: true
        - mountPath: /opt/legion/jwtconf
          name: jwt-config
          readOnly: true
        ports:
        - containerPort: 5000
          name: api
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 120
          timeoutSeconds: 8
          failureThreshold: 5
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}-edi"
  labels:
    component: "{{ .Release.Name }}-edi"
    {{- include "legion.helm-labels" . | nindent 4 }}
spec:
  selector:
    component: "{{ .Release.Name }}-edi"
  ports:
  - name: api
    targetPort: 5000
    port: 80
    protocol: TCP
---
{{- if (ternary $.Values.edi.ingress.enabled $.Values.ingress.enabled (hasKey $.Values.edi.ingress "enabled")) }}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
  {{- range $key, $value := .Values.edi.ingress.annotations }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  {{- template "ingress-annotations" . }}
  labels:
    component: "{{ .Release.Name }}-edi"
    {{- include "legion.helm-labels" . | nindent 4 }}
  name: "{{ .Release.Name }}-edi"
spec:
  rules:
    - host: "{{ ternary $.Values.edi.ingress.domain (printf "edi.%s" $.Values.ingress.globalDomain) (hasKey $.Values.edi.ingress "domain") }}"
      http:
        paths:
          - backend:
              serviceName: "{{ .Release.Name }}-edi"
              servicePort: 80
  {{- if (ternary $.Values.edi.ingress.tlsEnabled $.Values.ingress.tlsEnabled (hasKey $.Values.edi.ingress "tlsEnabled")) }}
  tls:
  - hosts:
    - "{{ ternary $.Values.edi.ingress.domain (printf "edi.%s" $.Values.ingress.globalDomain) (hasKey $.Values.edi.ingress "domain") }}"
    secretName: "{{ ternary $.Values.edi.ingress.tlsSecretName $.Values.ingress.tlsSecretName (hasKey $.Values.edi.ingress "tlsSecretName") }}"
  {{- end }}
{{- end }}
{{- end }}
# Version of Legion
# By default .Chart.AppVersion version is used
# Type: string
# legionVersion: "1.0"

# Does cluster require RBAC
# Type: bool
rbac: true

# Docker images registry
# This registry will be used for automatic docker image name deduction based on Legion naming for images
# Each image could be overrided mannualy in .<service>.customImage, please see .edi root section or other
# Type: string
imagesRegistry: legionplatform

# Verbosity of loggin features in components
# Valid values are:
# - info
# - debug
# - warning
# - error
logLevel: info

# This controls management of network policy rules
# If enabled it allows income traffic from namespaces labeled with k8s-component: monitoring or k8s-component: ingress
# Type: bool
networkPolicy: true

# Configuration of Legion ingresses
# Ingresses are for next <service>s
# - edi
# - edge
ingress:
  # Global flag for Ingress enabling
  # Each Ingress could be configurred manually in .<service>.ingress.enabled
  # Type: bool
  enabled: false

  # Root domain for auto-created Ingress domains.
  # Each domain could be configurred manually in .<service>.ingress.domain
  # Also it controlls building URLs for external resources such as auth endpoint
  # Type: string
  globalDomain: example.com

  # Global annotations for all services
  # Each Ingress could be configurred manually in .<service>.ingress.annotations
  # Type: string->string map
  annotations: {}
  #  kubernetes.io/ingress.class: nginx
  #  kubernetes.io/tls-acme: "true"

  # Global TLS flag
  # Each Ingress could be configurred manually in .<service>.ingress.tlsEnabled
  # Also it controlls building URLs for external resources such as auth endpoint
  # Type: bool
  tlsEnabled: true

  # Global TLS secret name
  # Each Ingress could be configurred manually in .<service>.ingress.tlsSecretName
  # Type: string
  tlsSecretName: undefined-secret

# Security configuration. Model API security configures in .modelApiSecurity section (see below)
security:
  # Is authorization for WEB requests enabled or not
  # Type: bool
  enabled: true

  # Type of authorization. Currently only oauth2_proxy is supported
  # Valid values are:
  # - oauth2_proxy
  integration: oauth2_proxy

  # Detail configuration of oauth2_proxy
  oauth2_proxy:
    # Internal URL of oauth2_proxy that will be called on each Ingress request. Is used in auth_request directive on Ingress Nginx
    # Type: string
    url: http://oauth2-proxy.kube-system.svc.cluster.local:4180/oauth2/auth

    # Public URL on which user will be redirected for authrorization
    # Uncomment for custom public URL, otherwise auth.<ingress.globalDomain> will be used
    # besided standart Nginx Ingress variables, escaped_request_uri is available too
    # Type: string
    # public_url: https://auth.my-company.com/oauth2/start?rd=https://$host$escaped_request_uri

# Model API security
modelApiSecurity:
  # Should Model API security be closed by auth. or not
  # Type: bool
  enabled: true

  # Type of auth. mechanism for Model API gateway
  # Valid values are:
  # - jwt
  integration: jwt

  # Detailed JWT configuration
  jwt:
    # Secret for JWT
    # Type: string
    secret: example

    # Default token's TTL in minutes
    # Type: integer
    defaultTokenTTLInMinutes: 120

    # Maximum value of TTL in minutes
    # This value is used in EDI to validate requests for token generation
    # Type: integer
    maxTokenTTLInMinutes: 60*24*365

    # Default TTL end date
    # Type: date sting, e.g. 2030-12-30T00:00:00
    defaultTokenTTLEndDate: "2030-12-30T00:00:00"

# Components metrics measurement
# Measures components performance through prometheus protocol
metrics:
  # Is measurements enabled or not
  # Type: bool
  enabled: false

  # Namespaces where monitoring facilities live
  # Type: string
  namespace: monitoring

# StatsD configuration for metrics that requires StatsD format (e.g. model invocation & training metrics)
modelMetrics:
  # Is model performace metrics enabled or not
  # Type: bool
  enabled: false

  # StatsD host
  # Type: string
  host: statsd-exporter.kube-monitoring.svc.cluster.local

  # StatsD port
  # Type: integer
  port: 9125


# Default VCS instances. Will be spawned on cluster start
vcs: ~

# Model storage is a Docker Registry
# Credentials are required for gathering model information
modelStorage:
  # Prefix for all built images
  # Might be useful for management purposes
  # Type: string
  buildPrefix: "legion-"

  # Type of Docker Registry.
  # Valid values are:
  # - external - use external Docker Registry
  type: external
  # TODO: add "internal" variant - deploy and use internal Docker Registry with empheral disk (only for development purposes)

  # Detailed configuration of external Docker Registry
  external:
    # URL of Docker Registry
    # Type: string
    url: ~

    # Credentials on Docker Registry
    # Type: string
    user: example

    # Credentials on Docker Registry
    # Type: string
    password: example


# Configuration of model execution process
modelExecution:
  # Limitations of model deployment pods
  # For declaration format see https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  limits:
    cpu: 256m
    mem: 256Mi

# Feedback configuration
feedback:
  # Is feedback gathering stack enabled or not
  enabled: false

  fluentd:
    # This variable can be enabled to setup custom image name for fluentd
    # Type: string
    # customImage: custom-image:1.0

    # Resources for each instance
    # For declaration format see https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    resources:
      requests:
        cpu: "300m"
        memory: "256Mi"
      limits:
        cpu: "500m"
        memory: "1024Mi"

    # Input port number
    # Type: integer
    port: 24224

  output:
    # Where feedback data should be stored
    # Only S3 is supported nowadays
    # Valid values:
    # s3 - AWS S3
    target: s3

    # Detail configuration for storing on S3
    s3:
      # Type of authorization on S3
      # Valid values are:
      # - iam - requires kube2iam to be installed in cluster,
      #         adds annotation "iam.amazonaws.com/role" to FluentD Pod
      #         value of annotation could be specified in .feedback.output.s3.customIAMRole
      # - secret - provide AWS Key ID and AWS Secret Key in ENV variables for FluentD server
      #            AWS Key ID and AWS Secret Key should be specified in
      #            .feedback.output.s3.AWSKeyID and .feedback.output.s3.AWSSecretKey
      authorization: iam

      # Custom name for IAM for iam-based authorization mode of FluentD
      # For details see authorization directive above
      # By default "<.ingress.globalDomain>-<.Release.Namespace>-collector-role" is used
      # Type: string
      #customIAMRole: ~

      # AWS Key ID for secret-based authorization mode of FluentD
      # For details see authorization directive above
      # Type: string
      #AWSKeyID: ~

      # AWS Secret Key for secret-based authorization mode of FluentD
      # For details see authorization directive above
      # Type: string
      #AWSSecretKey: ~

      # S3 bucket name
      # By default <.ingress.globalDomain>-feedback is used
      # Type: string
      customBucket: ~

      # S3 region
      # Type: string
      region: ~

      # Directory for data storing
      # Type: string
      path: "model_log/${tag}/${model_id}/${model_version}/year=%Y/month=%m/day=%d/"

      # Format of file names
      # Type: string
      objectKeyFormat: "%{path}%{time_slice}_%{index}.%{file_extension}"

      # Slicing format
      # Type: string
      timeSliceFormat: "%Y%m%d%H"

      # Slicing wait time
      # Type: string
      timeSliceWait: "5m"

      # Storage type
      # Type: string
      storeAs: "json"

      # Storage format
      # Type: string
      format: "json"

      # Buffering (chunking)
      buffering:
        # Chunks length (window size)
        # Type: string
        timekey: 1m

        # Delay for flush (after end of window)
        # Type: string
        timekeyWait: 0s

        # Temporary buffering location
        # Type: string
        path: /tmp

# Operator configuration
# Operator handles all Legion's CustomResources such as ModelTraining and etc.
operator:
  # Operator's server configuration
  # It listents Kubernetes API for Legion CR update events
  #  and creates/updates appropriate Pods / Secrets
  server:
    # This variable can be uncommented to setup custom image name for operator (server)
    # Type: string
    # customImage: custom-image:1.0

    # Resources for each instance
    # For declaration format see https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    resources:
      limits:
        cpu: "256m"
        memory: "256Mi"
      requests:
        cpu: "128m"
        memory: "128Mi"

  # Builder's configuration
  # It places in sidecar container for training pod
  #  and it is in charge of communicating with host's Docker socket
  #  for training container capturing.
  builder:
    # This variable can be uncommented to setup custom image name for operator (builder)
    # Type: string
    # customImage: custom-image:1.0

# EDI server configuration
# It provides HTTP API for model training & model deployment management
#  also it creates JWT tokens for model invocation
edi:
  # EDI could be disabled
  # Type: bool
  enabled: true

  # This variable can be uncommented to setup custom image name for operator (server)
  # Type: string
  # customImage: custom-image:1.0

  # Count of EDI replicas
  # Type: integer
  replicas: 1

  # Maximum number of retries for K8S API calls
  # Type: integer
  k8sApiRetryNumberMaxLimit: 10

  # Delay between retries for K8S API calls
  # Type: integer
  k8sApiRetryDelaySec: 3

  # Port on which EDI listens income trafic
  # Type: integer
  port: 80

  # Resources for each instance
  # For declaration format see https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  resources:
    requests:
      cpu: "50m"
      memory: "128Mi"
    limits:
      cpu: "100m"
      memory: "512Mi"

  # Configuration of ingress object
  ingress:
    # Custom enabling/disabling of Ingress resource for EDI
    # To use specific value, uncomment and replace ~ with target value
    # Type: bool
    # enabled: ~

    # Annotations for ingress
    # Will be added to global annotations (.ingress.annotations)
    # Type: string->string map
    annotations: {}

    # Custom domain name
    # By default domain name "edi.<..ingress.globalDomain>" is used
    # To use specific value, replace ~ with target value
    # Type: string
    # domain: ~

    # Is TLS enabled for this Ingress or not
    # By default global variable is used (.ingress.tlsEnabled)
    # To use specific value, replace ~ with target value
    # Type: string
    # tlsEnabled: false

    # Global TLS secret name
    # By default global variable is used (.ingress.tlsSecretName)
    # To use specific value, replace ~ with target value
    # Type: string
    # tlsSecretName: ~

# EDGE gateway
# It handles all income traffic for model invocation
#  and it does JWT validation of requests if it is enabled
edge:
  # EDGE gateway could be disabled
  # Type: bool
  enabled: true

  # This variable can be uncommented to setup custom image name for operator (server)
  # Type: string
  # customImage: custom-image:1.0

  # Count of EDGE replicas
  # Type: integer
  # TODO: Force 2 in tests
  replicas: 1

  # Enable home (root) page of EDGE gateway
  # EDGE returns 404 for requests on / URI if it is disabled
  # Type: bool
  enableHomePage: true

  # Port on which EDI listens income trafic
  # Type: integer
  port: 80

  # Resources for each instance
  # For declaration format see https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  resources:
    requests:
      cpu: "50m"
      memory: "128Mi"
    limits:
      cpu: "100m"
      memory: "512Mi"

  # Ingress object configuration
  ingress:
    # Custom enabling/disabling of Ingress resource for EDGE
    # To use specific value, uncomment and replace ~ with target value
    # Type: bool
    #enabled: ~

    # Annotations for ingress
    # Will be added to global annotations (.ingress.annotations)
    # Type: string->string map
    annotations: {}

    # Custom domain name
    # By default domain name "edge.<..ingress.globalDomain>" is used
    # To use specific value, uncomment and replace ~ with target value
    # Type: string
    #domain: ~

    # Is TLS enabled for this Ingress or not
    # By default global variable is used (.ingress.tlsEnabled)
    # To use specific value, uncomment and replace ~ with target value
    # Type: string
    #tlsEnabled: ~

    # Global TLS secret name
    # By default global variable is used (.ingress.tlsSecretName)
    # To use specific value, uncomment and replace ~ with target value
    # Type: string
    #tlsSecretName: ~

toolchains:
  python:
    # This variable can be uncommented to setup custom image name for python
    # Type: string
    # customImage: custom-image:1.0

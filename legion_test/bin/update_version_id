#!/usr/bin/env python
#
#   Copyright 2018 EPAM Systems
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
"""
Tool for updating version files
"""
import argparse
import datetime
import os
import re
import subprocess


SEARCH_PATTERN = r'''^__version__\s+=\s+'([0-9\.]+)(\+.*)?'$'''


def get_git_revision(file, use_short_hash=True):
    """
    Get current GIR revision of file

    :param file: path to file for check
    :type file: str
    :param use_short_hash: return shorten revision id
    :type use_short_hash: bool
    :return: str or None -- revision id
    """
    try:
        directory = file
        if not os.path.isdir(directory):
            directory = os.path.dirname(file)

        revision = subprocess.check_output(['git', 'rev-parse',
                                            '--short' if use_short_hash else '',
                                            'HEAD'],
                                           cwd=directory)
    except subprocess.CalledProcessError:
        return None

    if isinstance(revision, bytes):
        revision = revision.decode('utf-8')

    return revision.strip()


def patch_version_file(file, local_version):
    """
    Update local version for file

    :param file: path to version file
    :type file: str
    :param local_version: local version string
    :type local_version: str
    :return: str - base version
    """
    with open(file, 'r') as stream:
        content = stream.read()
        if isinstance(content, bytes):
            content = content.decode('utf-8')

    base_version = re.search(SEARCH_PATTERN, content, flags=re.MULTILINE)
    if not base_version or not base_version.group(1):
        raise Exception('Cannot find version string')

    content = re.sub(SEARCH_PATTERN, '__version__ = \'\\1+%s\'' % local_version, content, flags=re.MULTILINE)

    with open(file, 'w') as stream:
        stream.write(content)

    return base_version.group(1)


def work(args):
    """
    Perform work with version file: add local version (datetime, build, git commit sha)

    :param args: arguments
    :type args: :py:class:`argparse.Namespace`
    :return: None
    """

    if not os.path.exists(args.version_file) or not os.path.isfile(args.version_file):
        raise Exception('Cannot find version file: %s' % args.version_file)

    date_string = datetime.datetime.now().strftime('%y%m%d%H%M%S')

    git_revision = get_git_revision(args.version_file, not args.use_full_commit_id)
    if not git_revision:
        git_revision = '0000'

    build_id = os.getenv('BUILD_NUMBER', None)
    if args.build_id:
        build_id = args.build_id

    if not build_id:
        build_id = 0

    local_version_string = '%s.%s.%s' % (date_string, str(build_id), git_revision)

    base_version = patch_version_file(args.version_file, local_version_string)

    print('%s+%s' % (base_version, local_version_string))

    if args.extended_output:
        print(base_version)
        print(local_version_string)


if __name__ == '__main__':
    parser = argparse.ArgumentParser('Version file updater (adds time, build id, commit id to version)')
    parser.add_argument('version_file', type=str, help='Path to version file')
    parser.add_argument('--build-id', type=int, help='Override build id. Default from env.BUILD_NUMBER')
    parser.add_argument('--use-full-commit-id', action='store_true', help='Use full git sha commits')
    parser.add_argument('--extended-output', action='store_true', help='Output to stdout extended information')

    args = parser.parse_args()

    try:
        work(args)
    except KeyboardInterrupt:
        print('Interrupt')
        exit(2)
    except Exception as exception:
        print('Exception')
        print(exception)
        exit(3)

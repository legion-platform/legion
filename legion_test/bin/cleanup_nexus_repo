#!/usr/bin/env python3
#
#    Copyright 2018 EPAM Systems
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

import requests
import datetime
import argparse
import re
import logging
import sys
from typing import NamedTuple


Options = NamedTuple('Options', [
    ('nexus_url', str),
    ('user', str),
    ('password', str),
    ('dry_run', bool),
    ('remaining_days', int),
    ('repositories', list),
    ('build_name', str)
])

NEXUS_SEARCH_URL = '{host}/service/rest/v1/components'
NEXUS_DELETE_URL = '{host}/service/rest/v1/components/{resource}'
allowed_responce_codes = [200, 201, 202, 204]


def get_builds(nexus_url, repository, user, password, build_name):
    """
    Get list of Legion artifacts at Nexus repo matching search filters

    :param api_url: Nexus API URL
    :type api_url: str
    :param repository: Nexus repository name
    :type repository: str
    :param user: Nexus admin user
    :type user: str
    :param password: Nexus admin user password
    :type password: str
    :param build_name: Nexus component name, none for any
    :return: list[dict, dict] List of Nexus components
    """

    search_filters = {"repository": repository}
    if build_name:
        search_filters["name"] = build_name

    builds = []
    try:
        url = NEXUS_SEARCH_URL.format(host=nexus_url)
        log.info('Fetching Nexus artifacts from URL {}'.format(url))
        response = requests.get(url, params=search_filters, auth=(user, password))
        if response.status_code not in allowed_responce_codes:
                raise Exception("Non 200 response from Nexus!")
        response_data = response.json()
        builds.extend(response_data.get("items"))

        continuation_token = response_data.get('continuationToken')

        while continuation_token is not None:
            log.info('Fetching Nexus artifacts from URL {} (from {})'.format(url, continuation_token))
            search_filters["continuationToken"] = continuation_token
            response = requests.get(url, params=search_filters, auth=(user, password))
            if response.status_code not in allowed_responce_codes:
                raise Exception("Non 200 response from Nexus!")
            response_data = response.json()
            builds.extend(response_data.get("items"))
            continuation_token = response_data.get('continuationToken')

    except Exception as e:
        log.error('Error fetching Nexus artifacts: {}'.format(e))
        raise

    return builds


def filter_builds_by_date(builds, remaining_days):
    """
    Filter builds based on date in version string

    :param builds: List of Nexus components
    :type builds: list
    :param remaining_days: Number of days to leave the builds
    :type remaining_days: int
    :return: list[dict, dict] List of Nexus components older than remaining_days
    """
    remaining_date = datetime.datetime.now() - datetime.timedelta(remaining_days)
    builds_to_del = []
    for build in builds:
        try:
            build_date = re.search('\d{14}', build.get("version")).group()
            if datetime.datetime.strptime(build_date, '%Y%m%d%H%M%S') < remaining_date:
                builds_to_del.append(build)
        except Exception as e:
            pass

    return builds_to_del


def delete_builds(nexus_url, user, password, builds, dry_run):
    """
    Delete artifacts from Nexus repository

    :param api_url: Nexus API URL
    :type api_url: str
    :param user: Nexus admin user
    :type user: str
    :param password: Nexus admin user password
    :type password: str
    :param builds: List of Nexus components
    :type builds: list
    :param dry_run: Dry run mode selector, no delete actions to be performed if True
    :param dry_run: bool
    :return: None
    """
    log.info("List of artifacts to delete: {}".format(
        [("{}-{}".format(build.get("name"), build.get("version"))) for build in builds]))
    if dry_run:
        log.info("Dry run mode selected, no actions to be performed.")
    else:
        for build in builds:
            try:
                log.info("Deleting {}-{}-{}...".format(
                        build.get("name"),
                        build.get("version"),
                        build.get("id")))
                response = requests.delete(NEXUS_DELETE_URL.format(
                    host=nexus_url,
                    resource=build.get("id")),
                    auth=(user, password))
                if response.status_code not in allowed_responce_codes:
                    raise Exception("Non 200 response from Nexus!")
            except Exception as e:
                log.error("Error deleting artifact from Nexus: {}".format(e))
                raise


def work(options):
    """
    Get Legion artifacts matching build_name (if specified) from Nexus repository
    and delete those who older than remaining_days

    :param options: options
    :type options: :py:class:`Options`
    :return: None
    """

    for repo in options.repositories:
        log.info('Cleaning up {} Nexus repository'.format(repo))
        try:
            builds_to_del = filter_builds_by_date(get_builds(
                options.nexus_url,
                repo,
                options.user,
                options.password,
                options.build_name), options.remaining_days)
            if builds_to_del:
                try:
                    delete_builds(
                        options.nexus_url,
                        options.user,
                        options.password,
                        builds_to_del,
                        options.dry_run)
                except Exception as e:
                    log.error('Can\'t delete artifacts for {} repository: {}'.format(repo, e))
                    raise
            else:
                log.warning("No artifacts matching the filter found in {} repository".format(repo))
        except Exception as e:
            log.error('Error fetching list of builds for {} repository: {} '.format(repo, e))
            raise


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Script for Legion artifacts cleanup at Nexus repository')
    parser.add_argument('nexus_url', type=str, help='Nexus repo url')
    parser.add_argument('--user', '-u', type=str, default='admin', help='Nexus admin user')
    parser.add_argument('--password', '-p', type=str, default='admin123', help='Nexus admin password')
    parser.add_argument('--remaining-days', type=int, help='Number of days to remain builds')
    parser.add_argument('--build-name', '-n', type=str, help='Build name to delete')
    parser.add_argument('--repositories', '-r', default=['main-docker', 'jenkins_plugins', 'pypi-hosted'],
                        help='List of repositories to cleanup', nargs='+')
    parser.add_argument('--dry-run', '-d', action="store_true", help='Do not perform any actions')
    parser.add_argument('--verbose', '-v', action='store_true', help='verbose log output')

    args = parser.parse_args()
    arguments = Options(
        nexus_url=args.nexus_url,
        user=args.user,
        password=args.password,
        dry_run=args.dry_run,
        remaining_days=args.remaining_days,
        build_name=args.build_name,
        repositories=args.repositories
    )

    log = logging.getLogger(__name__)
    if args.verbose:
        log_level = logging.DEBUG
    else:
        log_level = logging.ERROR
    logging.basicConfig(level=log_level, format='%(asctime)s - %(levelname)s - %(message)s')

    try:
        work(arguments)
    except Exception as e:
        log.error('Error removing Nexus artifacts: {}'.format(e))
        sys.exit(1)

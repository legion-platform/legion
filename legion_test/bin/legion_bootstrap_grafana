#!/usr/bin/env python3
#
#    Copyright 2017 EPAM Systems
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

try:
    import docker_bootup
except ImportError:
    pass

import argparse
import json
import time

from legion_test.grafana import GrafanaClient
from legion_test.template import render_template


DATA_SOURCE_NAME = 'graphite'


def _is_data_source_created(client, data_source_name):
    try:
        client._query('/api/datasources/name/%s' % data_source_name)
        return True
    except Exception:
        return False


def _create_graphite_data_source(client, data_source_url):
    if not _is_data_source_created(client, DATA_SOURCE_NAME):
        json_text = render_template('grafana-datasource.json.tmpl', {
            'DATA_SOURCE_URL': data_source_url
        })
        client._query('/api/datasources', json.loads(json_text), action='post')


def _create_base_dashboard(client):
    json_text = render_template('grafana-main-dashboard.json.tmpl')
    create_response = client._query('/api/dashboards/db', json.loads(json_text), action='post')
    slug = create_response.get('slug')
    if not slug:
        raise Exception('Cannot get slug of new dashboard')

    dashboard_info = client._query('/api/dashboards/db/%s' % slug)
    dash_id = dashboard_info['dashboard']['id']

    return dash_id


def _star_dashboard(client, dashboard_id):
    try:
        client._query('/api/user/stars/dashboard/%d' % dashboard_id, action='post')
    except:
        pass


def _set_startup_dashboard(client, dashboard_id):
    payload = {
        'theme': '',
        'homeDashboardId': dashboard_id,
        'timezone': ''
    }
    client._query('/api/preferences/set-home-dash', payload, action='post')


def _get_all_datasources(client):
    return client._query('/api/datasources')


def work(base, graphite_ds_url, user, password, args):
    client = GrafanaClient(base, user, password)

    start = time.time()
    while True:
        elapsed = time.time() - start
        if elapsed > args.connection_timeout:
            break

        try:
            _get_all_datasources(client)
            break
        except Exception:
            print('Reconnecting...')
            time.sleep(args.socket_reconnect_sleep)

    # First, create data source
    _create_graphite_data_source(client, graphite_ds_url)

    # Next, create base dashboard
    dashboard_id = _create_base_dashboard(client)
    # Star
    _star_dashboard(client, dashboard_id)
    # And set home
    _set_startup_dashboard(client, dashboard_id)


if __name__ == '__main__':
    parser = argparse.ArgumentParser('Grafana Bootstraper')
    parser.add_argument('base_url', type=str, help='Base server url')
    parser.add_argument('graphite_ds_url', type=str, help='Graphite Data Source url')
    parser.add_argument('--user', type=str, help='Server user', default='admin')
    parser.add_argument('--password', type=str, help='Server password', default='admin')
    parser.add_argument('--connection-timeout', type=int, default=120)
    parser.add_argument('--socket-reconnect-sleep', type=int, default=10)
    args = parser.parse_args()
    work(args.base_url, args.graphite_ds_url, args.user, args.password, args)

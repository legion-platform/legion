#!/usr/bin/env python
#
#   Copyright 2017 EPAM Systems
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
"""
Tool for updating version files
"""
import argparse
import datetime
import os
import re
import subprocess

SEARCH_PATTERN = r'''^__version__\s+=\s+'([0-9\.]+\w*?)(\+.*)?'$'''


def get_git_revision(file, use_short_hash=True):
    """
    Get current GIT revision of file

    :param file: path to file for check
    :type file: str
    :param use_short_hash: return shorten revision id
    :type use_short_hash: bool
    :return: str or None -- revision id
    """
    try:
        directory = file
        if not os.path.isdir(directory):
            directory = os.path.dirname(file)

        revision = subprocess.check_output(['git', 'rev-parse',
                                            '--short' if use_short_hash else '',
                                            'HEAD'],
                                           cwd=directory)
    except subprocess.CalledProcessError:
        return None

    if isinstance(revision, bytes):
        revision = revision.decode('utf-8')

    return revision.strip()


def get_base_version(file):
    """
    Update local version for file

    :param file: path to version file
    :type file: str
    :return: str - base version
    """
    with open(file, 'r') as stream:
        try:
            content = stream.read()
            base_version = re.search(SEARCH_PATTERN, content, flags=re.MULTILINE)
        except Exception as err:
            raise Exception('Can\'t get version from version string')

    return base_version.group(1)


def patch_version_file(file, build_version, git_revision, build_id, build_user, date_string):
    """
    Update local version for file

    :param file: path to version file
    :type file: str
    :param build_version: build version string
    :type build_version: str
    :param git_revision: build version string
    :type git_revision: str
    :param build_id: build id
    :type build_id: str
    :param build_user: build user id
    :type build_user: str
    :param date_string: build time
    :type date_string: str
    """
    with open(file, 'r') as stream:
        content = stream.read()
        if isinstance(content, bytes):
            content = content.decode('utf-8')

    content = re.sub(SEARCH_PATTERN, '__version__ = \'{}\''.format(build_version), content, flags=re.MULTILINE)
    content = ''.join((
        content,
        '__git_revision__ = \'{}\'\n'.format(git_revision),
        '__build_id__ = \'{}\'\n'.format(build_id),
        '__build_user__ = \'{}\'\n'.format(build_user),
        '__build_date__ = \'{}\'\n'.format(date_string)
    ))

    with open(file, 'w') as stream:
        stream.write(content)


def work(args, version_file):
    """
    Set version and build metadata to version file

    :param version_file: path to a version file
    :param args: arguments
    :return: None
    """

    if not os.path.exists(version_file) or not os.path.isfile(version_file):
        raise Exception('Cannot find version file: %s' % version_file)

    date_string = datetime.datetime.now().strftime('%Y%m%d%H%M%S')

    if not args.git_revision:
        git_revision = get_git_revision(version_file, not args.use_full_commit_id)
        if not git_revision:
            git_revision = '0000'
    else:
        git_revision = args.git_revision

    build_id = args.build_id
    build_user = args.build_user

    if not args.build_version:
        local_version_string = '%s.%s.%s' % (date_string, str(build_id), git_revision)
        build_version = '{}-{}'.format(get_base_version(version_file), local_version_string)
    else:
        build_version = args.build_version

    patch_version_file(version_file, build_version, git_revision, build_id, build_user, date_string)

    return build_version


if __name__ == '__main__':
    parser = argparse.ArgumentParser('Version file updater (adds time, build id, commit id to version)')
    parser.add_argument('build_id', type=int, help='Set build id')
    parser.add_argument('build_user', type=str, help='Set build user')
    parser.add_argument('--build-version', type=str, help='Explicitly specify new Legion build version')
    parser.add_argument('--use-full-commit-id', action='store_true', help='Use full git sha commits')
    parser.add_argument('--git-revision', type=str, help='Set git revision')

    args = parser.parse_args()

    try:
        for dir, package in [('sdk', 'sdk'), ('cli', 'cli'), ('robot', 'robot'), ('services', 'services'),
                             ('toolchains/python', 'toolchain')]:
            build_version = work(args, 'legion/{dir}/legion/{package}/version.py'.format(dir=dir, package=package))

        print(build_version)
    except KeyboardInterrupt:
        print('Interrupt')
        exit(2)
    except Exception as exception:
        print('Exception')
        print(exception)
        exit(3)

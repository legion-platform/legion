{{- if .Values.edi.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-edi"
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Release.Name }}-edi"
spec:
  replicas: {{ .Values.edi.replicas }}
  selector:
    matchLabels:
      component: "{{ .Release.Name }}-edi"
  template:
    metadata:
      labels:
        component: "{{ .Release.Name }}-edi"
    spec:
      serviceAccountName: "{{ .Release.Name }}-edi"
      volumes:
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
      - name: cluster-secrets
        secret:
          secretName: "{{ .Release.Name }}-cluster-secrets"
      - name: cluster-state
        configMap:
          name: "{{ .Release.Name }}-cluster-state"
      - name: jwt-config
        secret:
          secretName: "{{ .Release.Name }}-jwt-config"
      containers:
      - name: edi
        image: "{{ .Values.edi.image.repository }}:{{ .Values.edi.image.tag }}"
        resources:
          requests:
            cpu: "50m"
            memory: "128Mi"
          limits:
            cpu: "100m"
            memory: "512Mi"
        env:
        - name: DEPLOYMENT
          value: "{{ .Release.Name }}"
        - name: NAMESPACE
          value: "{{ .Release.Namespace }}"
        - name: LEGION_API_ADDR
          value: "0.0.0.0"
        - name: LEGION_API_PORT
          value: "5000"
        - name: VERBOSE
          value: "1"
        - name: DOCKER_REGISTRY
          value: "{{ .Values.connections.docker.url }}"
        - name: DOCKER_REGISTRY_PROTOCOL
          value: "{{ .Values.connections.docker.protocol }}"
        - name: DOCKER_REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-cluster-secrets
              key: docker.user
        - name: DOCKER_REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-cluster-secrets
              key: docker.password
        - name: MODEL_IMAGES_REGISTRY_HOST
          value: "localhost:31111"
        - name: K8S_API_RETRY_NUMBER_MAX_LIMIT
          value: "{{ .Values.edi.k8s_api_retry_number_max_limit }}"
        - name: K8S_API_RETRY_DELAY_SEC
          value: "{{ .Values.edi.k8s_api_retry_delay_sec }}"
        - name: REGISTER_ON_GRAFANA
          value: "true"
        - name: MODEL_K8S_MEMORY
          value: "{{ .Values.model_resources.mem }}"
        - name: MODEL_K8S_CPU
          value: "{{ .Values.model_resources.cpu }}"
        volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-socket
        - mountPath: /opt/legion/secrets
          name: cluster-secrets
          readOnly: true
        - mountPath: /opt/legion/state
          name: cluster-state
          readOnly: true
        - mountPath: /opt/legion/jwtconf
          name: jwt-config
          readOnly: true
        ports:
        - containerPort: 5000
          name: api
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 120
          timeoutSeconds: 8
          failureThreshold: 5
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}-edi"
  labels:
    component: "{{ .Release.Name }}-edi"
    legion.system: "yes"
    legion.component: "edi"
spec:
  selector:
    component: "{{ .Release.Name }}-edi"
  ports:
  - name: api
    targetPort: 5000
    port: 80
    protocol: TCP
---
{{- if .Values.edi.ingress.enabled -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
  {{- range $key, $value := .Values.edi.ingress.annotations }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  {{- template "dex-ingress-annotations" . }}
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Release.Name }}-edi"
    legion.system: "yes"
    legion.component: "edi"
  name: "{{ .Release.Name }}-edi"
spec:
  rules:
    - host: "{{ .Values.edi.ingress.domain.partial }}{{ .Values.domainDelimiter }}{{ .Values.rootDomain }}"
      http:
        paths:
          - backend:
              serviceName: "{{ .Release.Name }}-edi"
              servicePort: 80
    {{- if .Values.addLocalDomain }}
    - host: "{{ .Values.edi.ingress.domain.partial }}.local.{{ .Values.rootDomain }}"
      http:
        paths:
          - backend:
              serviceName: "{{ .Release.Name }}-edi"
              servicePort: 80
    {{- end }}
  {{- if .Values.edi.ingress.tls.enabled }}
  tls:
  - hosts:
    - "{{ .Values.edi.ingress.domain.partial }}{{ .Values.domainDelimiter }}{{ .Values.rootDomain }}"
    {{- if .Values.edi.ingress.tls.autoSecretNameDeduction }}
    secretName: "{{ .Values.rootDomain }}-tls"
    {{- else }}
    secretName: {{ .Values.edi.ingress.tls.secretName  }}
    {{- end }}
  {{- end }}
{{- end }}
{{- end }}

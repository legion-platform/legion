{{- if .Values.jenkins.enabled }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: "{{ .Release.Name }}-jenkins-dynamic-scripts"
data:
  configure-cloud.groovy: |-
    import org.csanchez.jenkins.plugins.kubernetes.*
    import jenkins.model.*

    cloud = new KubernetesCloud(
        'kubernetes', // name
        null, // templates
        null, // server url
        '{{ .Release.Namespace }}', // namespace
        'http://{{ .Release.Name }}-jenkins.{{ .Release.Namespace }}/', // jenkins-url
        '40', // container capacity
        0, // connect timeout
        0, // read timeout
        5 // retention timeout
    )

    Jenkins.getInstance().clouds.replace(cloud)
    Jenkins.getInstance().save()
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: "{{ .Release.Name }}-jenkins"
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Release.Name }}-jenkins"
spec:
  replicas: 1
  selector:
    component: "{{ .Release.Name }}-jenkins"
  template:
    metadata:
      annotations:
        iam.amazonaws.com/role: "{{ .Values.clusterName }}-jenkins-role"
      labels:
        component: "{{ .Release.Name }}-jenkins"
    spec:
      serviceAccountName: jenkins
      securityContext:
        fsGroup: 1000
      containers:
      - name: jenkins
        image: "{{ .Values.jenkins.image.repository }}:{{ .Values.jenkins.image.tag }}"
        imagePullPolicy: "{{ .Values.jenkins.image.pullPolicy }}"
        env:
        - name: JAVA_OPTS
          value: "-Djenkins.install.runSetupWizard=false -Dpermissive-script-security.enabled=true -Dcom.epam.legion.jenkins.dashboard.url=/dashboard/script/model_builds.js?orgId=1&theme=light&model= -Dcom.epam.legion.jenkins.report.html.path=notebook.html"
        - name: CORE_DEPLOYMENT_PREFIX
          value: "{{ .Release.Name }}-"
        - name: ENCLAVE_DEPLOYMENT_PREFIX
          value: "{{ .Values.enclaveDeploymentPrefix }}"
        # Information for building corect images
        - name: LEGION_PACKAGE_VERSION
          value: "{{ .Values.package.version }}"
        - name: LEGION_PACKAGE_REPOSITORY
          value: "{{ .Values.package.repository }}"
        - name: LEGION_BASE_IMAGE_TAG
          value: "{{ .Values.package.baseImage.tag }}"
        - name: LEGION_BASE_IMAGE_REPOSITORY
          value: "{{ .Values.package.baseImage.repository }}"
        # EDI credentials
        - name: EDI_USER
          value: ""
        - name: EDI_PASSOWRD
          value: ""
        - name: EDI_TOKEN
          value: ""
        # External resource (saving and loading model files)
        - name: EXTERNAL_RESOURCE_PROTOCOL
          value: "http"
        - name: EXTERNAL_RESOURCE_HOST
          value: "{{ .Release.Name }}-nexus.{{ .Release.Namespace }}.svc.{{ .Values.localDomain }}:8081/repository/raw"
        - name: EXTERNAL_RESOURCE_USER
          value: "admin"
        - name: EXTERNAL_RESOURCE_PASSWORD
          value: "{{ .Values.secrets.nexus.admin }}"
        # Storage of docker images with models
        - name: MODEL_IMAGES_REGISTRY_HOST
          value: "localhost:31111"
        - name: MODEL_IMAGES_REGISTRY
          value: "localhost:31111/legion_model/"
        - name: NEXUS_DOCKER_REGISTRY
          value: "http://legion-core-nexus.default.svc.{{ .Values.localDomain }}:8081/repository/docker-hosted"
        - name: DOCKER_REGISTRY_USER
          value: "admin"
        - name: DOCKER_REGISTRY_PASSWORD
          value: "{{ .Values.secrets.nexus.admin }}"
        # Model configuration
        - name: GRAPHITE_HOST
          value: "{{ .Release.Name }}-graphite.{{ .Release.Namespace }}.svc.{{ .Values.localDomain }}"
        - name: STATSD_HOST
          value: "{{ .Release.Name }}-graphite.{{ .Release.Namespace }}.svc.{{ .Values.localDomain }}"
        - name: STATSD_PORT
          value: "8125"
        {{- if .Values.jenkins.airflow.enabled }}
        - name: DAGS_VOLUME_PVC
          value: {{ .Values.jenkins.dags_volume_pvc }}
        - name: AIRFLOW_DAGS_DIRECTORY
          value: {{ .Values.jenkins.airflow_dags_directory }}
        - name: AIRFLOW_REST_API
          value: "{{ .Values.jenkins.airflow.rest_url }}"
        - name: AIRFLOW_EXPECTED_OUTPUT
          value: "{{ .Values.jenkins.airflow.expected_output }}"
        - name: AIRFLOW_S3_URL
          value: "{{ .Values.jenkins.airflow.s3_url }}"
        {{- end }}
        {{- if .Values.jenkins.openId.enable }}
        - name: OPENID_ENABLE
          value: "{{ .Values.jenkins.openId.enable }}"
        - name: OPENID_CLIENTID
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-jenkins-openid
              key: clientId
        - name: OPENID_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-jenkins-openid
              key: clientSecret
        - name: OPENID_TOKEN_SERVER_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-jenkins-openid
              key: tokenServerUrl
        - name: OPENID_AUTH_SERVER_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-jenkins-openid
              key: authServerUrl
        - name: OPENID_ADMIN_GROUPS
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-jenkins-openid
              key: adminGroups
        - name: OPENID_READ_ONLY_GROUPS
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-jenkins-openid
              key: readOnlyGroups
        {{- end }}
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 50000
          name: jenkins
          protocol: TCP
        volumeMounts:
        - mountPath: /usr/share/jenkins/ref/init.groovy.d/configure-cloud.groovy
          subPath: configure-cloud.groovy
          name: dynamic-scripts
        - mountPath: /var/jenkins_home
          name: jenkins-home
        {{- if .Values.jenkins.git_secret_name }}
        - mountPath: /var/jenkins.ssh
          name: git-secret
          readOnly: true
        {{- end }}
        livenessProbe:
          httpGet:
            path: /
            port: 50000
          initialDelaySeconds: 120
          timeoutSeconds: 5
      volumes:
      - name: jenkins-home
        persistentVolumeClaim:
          claimName: "{{ .Release.Name }}-jenkins-master-home"
      - name: dynamic-scripts
        configMap:
          name: "{{ .Release.Name }}-jenkins-dynamic-scripts"
      {{- if .Values.jenkins.git_secret_name }}
      - name: git-secret
        secret:
          secretName: "{{ .Values.jenkins.git_secret_name }}"
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}-jenkins"
  labels:
    component: "{{ .Release.Name }}-jenkins"
    legion.system: "yes"
    legion.component: "jenkins"
    legion.port: "80"
spec:
  selector:
    component: "{{ .Release.Name }}-jenkins"
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: jenkins
    port: 50000
    targetPort: 50000
    protocol: TCP
---
{{- if .Values.jenkins.ingress.enabled -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
  {{- range $key, $value := .Values.jenkins.ingress.annotations }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: "{{ .Release.Name }}-jenkins"
    legion.component: "jenkins"
  name: "{{ .Release.Name }}-jenkins"
spec:
  rules:
    - host: "{{ .Values.jenkins.ingress.domain.partial }}.{{ .Values.rootDomain }}"
      http:
        paths:
          - backend:
              serviceName: "{{ .Release.Name }}-jenkins"
              servicePort: 80
          - path: "/dashboard"
            backend:
              serviceName: "{{ .Release.Name }}-grafana"
              servicePort: 80
          - path: "/public"
            backend:
              serviceName: "{{ .Release.Name }}-grafana"
              servicePort: 80
          - path: "/api/datasources"
            backend:
              serviceName: "{{ .Release.Name }}-grafana"
              servicePort: 80

    {{- if .Values.addLocalDomain }}
    - host: "local-{{ .Values.jenkins.ingress.domain.partial }}.{{ .Values.rootDomain }}"
      http:
        paths:
          - backend:
              serviceName: "{{ .Release.Name }}-jenkins"
              servicePort: 80
    {{- end }}
  {{- if .Values.jenkins.ingress.tls.enabled }}
  tls:
  - hosts:
    - "{{ .Values.jenkins.ingress.domain.partial }}.{{ .Values.rootDomain }}"
    {{- if .Values.jenkins.ingress.tls.autoSecretNameDeduction }}
    secretName: "{{ .Values.rootDomain }}-tls"
    {{- else }}
    secretName: {{ .Values.jenkins.ingress.tls.secretName  }}
    {{- end }}
  {{- end }}
{{- end }}
{{- end }}

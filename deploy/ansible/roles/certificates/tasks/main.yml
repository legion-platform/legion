---
- name: get the username
  local_action: command whoami
  register: whoami_output

- name: Check that certificate exists
  connection: local
  stat:
    path: "{{ ler53_cert_dir }}/{{ ler53_cert_common_name }}.crt"
  register: exists_certificate_file

- name: Calculate date in future for certificate check
  command: python -c 'import datetime; print((datetime.datetime.now() + datetime.timedelta(days={{ ler53_check_delta_days }})).strftime("%Y%m%d%H%M%SZ"))'
  register: certificate_check_date

- name: "Ensure that the existing certificate is still valid in {{ ler53_check_delta_days }} days"
  connection: local
  openssl_certificate:
    path: "{{ ler53_cert_dir }}/{{ ler53_cert_common_name }}.crt"
    provider: assertonly
    valid_at: "{{ certificate_check_date.stdout }}"
  register: certificate_content_check
  ignore_errors: True

- name: "Store initial information about files"
  set_fact:
    valid_certificate_not_exists: true

- name: "Store gathered information about files"
  set_fact:
    valid_certificate_not_exists: false
  when: exists_certificate_file.stat.exists and not certificate_content_check.failed

- name: update apt cache
  become: yes
  apt:
    update_cache: yes
  connection: local
  when: valid_certificate_not_exists

- name: install the required dependencies
  become: yes
  apt:
    name: "{{ item }}"
    state: present
  with_items:
  - openssl
  - python-openssl
  connection: local
  when: valid_certificate_not_exists

- name: "create the {{ ler53_cert_dir }} directory"
  become: yes
  file:
    path: "{{ ler53_cert_dir }}"
    state: directory
    owner: "{{ whoami_output.stdout }}"
    mode: 0755
  connection: local
  when: valid_certificate_not_exists

- name: "create the {{ ler53_account_key_dir }} directory"
  become: yes
  file:
    path: "{{ ler53_account_key_dir }}"
    owner: "{{ whoami_output.stdout }}"
    mode: 0700
    state: directory
  connection: local
  when: valid_certificate_not_exists

- name: generate the private key
  openssl_privatekey:
    path: "{{ ler53_cert_dir }}/{{ ler53_key_file_name }}"
    size: "{{ ler53_key_size }}"
  connection: local
  when: valid_certificate_not_exists

- name: set the private key file permissions
  become: yes
  file:
    path: "{{ ler53_cert_dir }}/{{ ler53_key_file_name }}"
    owner: "{{ whoami_output.stdout }}"
    group: "{{ whoami_output.stdout }}"
    mode: "{{ ler53_cert_files_mode }}"
  connection: local
  when: valid_certificate_not_exists

- name: generate the CSR
  openssl_csr:
    path: "{{ ler53_cert_dir }}/{{ ler53_csr_file_name }}"
    privatekey_path: "{{ ler53_cert_dir }}/{{ ler53_key_file_name }}"
    common_name: "{{ ler53_cert_common_name }}"
    key_usage: "{{ ler53_cert_key_usages }}"
    subject_alt_name: "DNS:{{ ler53_cert_common_name }},DNS:*.{{ ler53_cert_common_name }}"
  register: generate_csr
  connection: local
  when: valid_certificate_not_exists

- name: set the CSR file permissions
  become: yes
  file:
    path: "{{ ler53_cert_dir }}/{{ ler53_csr_file_name }}"
    owner: "{{ whoami_output.stdout }}"
    group: "{{ whoami_output.stdout }}"
    mode: "{{ ler53_cert_files_mode }}"
  connection: local
  when: valid_certificate_not_exists

- name: generate the Let's Encrypt account key
  openssl_privatekey:
    path: "{{ ler53_account_key_dir }}/{{ ler53_account_key_file_name }}"
    size: "{{ ler53_account_key_size }}"
  connection: local
  when: valid_certificate_not_exists

- name: set the Let's Encrypt account key file permissions
  become: yes
  file:
    path: "{{ ler53_account_key_dir }}/{{ ler53_account_key_file_name }}"
    owner: "{{ whoami_output.stdout }}"
    mode: 0600
  connection: local
  when: valid_certificate_not_exists

- name: delete existing certificate
  become: yes
  file:
    path: "{{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
    state: absent
  when: valid_certificate_not_exists and generate_csr.changed and ler53_new_cert_when_csr_changes
  connection: local

- name: initiate the Let's Encrypt challenge
  letsencrypt:
    acme_directory: "{{ ler53_acme_url }}"
    acme_version: 2
    validate_certs: "{{ ler52_acme_certificate_check }}"
    challenge: dns-01
    account_key: "{{ ler53_account_key_dir }}/{{ ler53_account_key_file_name }}"
    csr: "{{ ler53_cert_dir }}/{{ ler53_csr_file_name }}"
    dest: "{{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
    account_email: "{{ ler53_account_email }}"
    remaining_days: "{{ ler53_cert_remaining_days_before_renewal }}"
    terms_agreed: true
    agreement: "{{ ler53_agreement | default(omit) }}"
  register: lets_encrypt_challenge
  connection: local
  when: valid_certificate_not_exists

- name: create the DNS records for the challenge
  route53:
    command: create
    zone: "{{ ler53_route_53_domain }}"
    record: "{{ item.value['dns-01']['record'] }}"  
    type: TXT
    ttl: 5
    value: "\"{{ item.value['dns-01']['resource_value'] }}\""
    overwrite: yes
    wait: yes
  with_dict: "{{ lets_encrypt_challenge['challenge_data'] | default({}) }}"
  connection: local
  when: valid_certificate_not_exists

- name: Wait for DNS changes propagation
  shell: sleep 60
  when: valid_certificate_not_exists

- name: validate the Let's Encrypt challenge
  letsencrypt:
    acme_directory: "{{ ler53_acme_url }}"
    acme_version: 2
    validate_certs: "{{ ler52_acme_certificate_check }}"
    challenge: dns-01
    account_key: "{{ ler53_account_key_dir }}/{{ ler53_account_key_file_name }}"
    csr: "{{ ler53_cert_dir }}/{{ ler53_csr_file_name }}"
    dest: "{{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
    account_email: "{{ ler53_account_email }}"
    data: "{{ lets_encrypt_challenge }}"
  connection: local
  when: valid_certificate_not_exists

- name: delete the DNS records for the challenge
  route53:
    command: delete
    zone: "{{ ler53_route_53_domain }}"
    record: "{{ item.value['dns-01']['record'] }}"
    type: TXT
    ttl: 5
    value: "\"{{ item.value['dns-01']['resource_value'] }}\""
  with_dict: "{{ lets_encrypt_challenge['challenge_data'] | default({}) }}"
  connection: local
  when: valid_certificate_not_exists

- name: set the cert file permissions
  file:
    path: "{{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
    owner: "{{ whoami_output.stdout }}"
    group: "{{ whoami_output.stdout }}"
    mode: "{{ ler53_cert_files_mode }}"
  connection: local
  when: valid_certificate_not_exists

- name: download the Let's Encrypt intermediate CA
  get_url:
    url: https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
    dest: "{{ ler53_cert_dir }}/{{ ler53_intermediate_file_name }}"
    owner: "{{ whoami_output.stdout }}"
    group: "{{ whoami_output.stdout }}"
    mode: "{{ ler53_cert_files_mode }}"
  register: ler53_intermediate_download_task
  when: valid_certificate_not_exists and ler53_intermediate_download
  connection: local

- name: get content of the certificate
  command: "cat {{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
  register: ler53_certificate_content
  changed_when: false
  when: valid_certificate_not_exists and ler53_intermediate_download
  connection: local

- name: get content of the intermediate CA
  command: "cat {{ ler53_cert_dir }}/{{ ler53_intermediate_file_name }}"
  register: ler53_intermediate_content
  changed_when: false
  when: valid_certificate_not_exists and ler53_intermediate_download
  connection: local

- name: create a file with the certificate and intermediate CA concatenated
  copy:
    content: "{{ ler53_certificate_content['stdout'] + '\n' + ler53_intermediate_content['stdout'] + '\n' }}"
    dest: "{{ ler53_cert_dir }}/{{ ler53_cert_and_intermediate_file_name }}"
    owner: "{{ whoami_output.stdout }}"
    group: "{{ whoami_output.stdout }}"
    mode: "{{ ler53_cert_files_mode }}"
  when: valid_certificate_not_exists and ler53_intermediate_download
  connection: local

- name: "create the {{ ler53_cert_dir }} directory"
  become: yes
  file:
    path: "{{ ler53_cert_dir }}"
    state: directory
    owner: "{{ ler53_cert_files_owner }}"
    mode: 0755

- name: copy certificates to the target location
  copy:
    src: "{{ ler53_cert_dir }}/{{ ler53_cert_common_name }}{{ extension }}"
    dest: "{{ ler53_cert_dir }}/{{ ler53_cert_common_name }}{{ extension }}"
#    owner: "{{ ler53_cert_files_owner }}"
#    group: "{{ ler53_cert_files_group }}"
#    mode: "{{ ler53_cert_files_mode }}"
  with_items:
    - ".key"
    - ".crt"
  loop_control:
    loop_var: extension

- name: Remove old TLS secret to kube-system namespace
  shell: "kubectl delete secret {{ ler53_cert_common_name }}-tls --namespace=kube-system --ignore-not-found=true"

- name: Add TLS secret to kube-system namespace
  shell: "kubectl create secret tls {{ ler53_cert_common_name }}-tls --namespace kube-system --key {{ ler53_cert_dir }}/{{ ler53_cert_common_name }}.key --cert {{ ler53_cert_dir }}/{{ ler53_cert_common_name }}.crt"

- name: Remove old TLS secret to default namespace
  shell: "kubectl delete secret {{ ler53_cert_common_name }}-tls --ignore-not-found=true"

- name: Add TLS secret to default namespace
  shell: "kubectl create secret tls {{ ler53_cert_common_name }}-tls --key {{ ler53_cert_dir }}/{{ ler53_cert_common_name }}.key --cert {{ ler53_cert_dir }}/{{ ler53_cert_common_name }}.crt"
- name: create temp directories
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  loop:
    - "{{ tmp_ssl_dir }}"
    - "{{ tls_cert_dir }}"

- name: Download TLS certificate from S3
  become: yes
  aws_s3:
    bucket: "{{ secrets_bucket }}"
    object: "vault/certificates/{{ profile }}.tar.gz"
    dest: "{{ tmp_ssl_dir }}/{{ profile }}.tar.gz"
    mode: get
  register: download_certificate_file
  ignore_errors: True

- name: Extract certificates from the archive
  become: yes
  unarchive:
    src: "{{ tmp_ssl_dir }}/{{ base_domain }}.tar.gz"
    dest: "{{ tls_cert_dir }}"
  when: not download_certificate_file.failed

- name: Calculate date in future for certificate check
  command: python -c 'import datetime; print((datetime.datetime.now() + datetime.timedelta(days={{ tls_check_delta_days }})).strftime("%Y%m%d%H%M%SZ"))'
  register: certificate_check_date
  when: not download_certificate_file.failed

- name: "Ensure that existing certificate is still valid in {{ tls_check_delta_days }} days"
  openssl_certificate:
    path: "{{ tls_cert_dir }}/{{ tls_fullchain_file_name }}"
    provider: assertonly
    valid_at: "{{ certificate_check_date.stdout }}"
  register: certificate_content_check
  when: not download_certificate_file.failed
  ignore_errors: True

- name: "Store initial information about files"
  set_fact:
    valid_certificate_not_exists: true

- name: "Store gathered information about files"
  set_fact:
    valid_certificate_not_exists: false
  when: not download_certificate_file.failed and not certificate_content_check.failed

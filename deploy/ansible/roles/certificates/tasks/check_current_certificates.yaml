
- name: Download TLS certificate from S3
  aws_s3:
    bucket: "{{ secrets_bucket }}"
    object: "vault/certificates/{{ profile }}.tar.gz"
    dest: "{{ tls_cert_dir }}/{{ profile }}.tar.gz"
    mode: get
  ignore_errors: true

- name: Extract certificates from the archive
  unarchive:
    src: "{{ tls_cert_dir }}/{{ profile }}.tar.gz"
    dest: "{{ tls_cert_dir }}"
  ignore_errors: true

- name: Calculate date in future for certificate check
  command: python -c 'import datetime; print((datetime.datetime.now() + datetime.timedelta(days={{ tls_check_delta_days }})).strftime("%Y%m%d%H%M%SZ"))'
  register: certificate_check_date

- name: "Ensure that the existing certificate is still valid in {{ tls_check_delta_days }} days"
  connection: local
  openssl_certificate:
    path: "{{ tls_cert_dir }}/{{ tls_cert_common_name }}.crt"
    provider: assertonly
    valid_at: "{{ certificate_check_date.stdout }}"
  register: certificate_content_check
  ignore_errors: True

- name: "Store initial information about files"
  set_fact:
    valid_certificate_not_exists: true

- name: "Store gathered information about files"
  set_fact:
    valid_certificate_not_exists: false
  when: exists_certificate_file.stat.exists and not certificate_content_check.failed
---

####################
# Install Ingress
####################

# Deploy ingress and default backend

- name: Gather kubernetes nodes security groups
  ec2_group_facts:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "nodes.{{ cluster_name }}"
  register: nodes_sg_facts

- name: Combine security groups
  set_fact:
    ingress_sgs: "{{ external_access_sgs }} + {{ nodes_sg_facts.security_groups|map(attribute='group_id')|list }}"

- name: Create Ingress configuration
  template:
    src: "{{ item }}.yml.j2"
    dest: "/tmp/{{ item }}.yml"
    mode: 0644
  with_items:
    - ingress-k8s
    - ingress-rbac
    - ingress-aws

- name: Deploy ingress and the default backend
  shell: |
    kubectl --context {{ cluster_name }} apply -f /tmp/ingress-k8s.yml
    kubectl --context {{ cluster_name }} apply -f /tmp/ingress-rbac.yml

- name: Patch Ingress controller
  shell: |
    kubectl --context {{ cluster_name }} patch deployment -n ingress-nginx nginx-ingress-controller --type='json' \
        --patch="$(curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/publish-service-patch.yaml)"

- name: Deploy aws ingress
  shell: |
    kubectl --context {{ cluster_name }} apply -f /tmp/ingress-aws.yml

- name: Get Ingress ELB endpoint
  shell: kubectl --context {{ cluster_name }} describe services ingress-nginx --namespace ingress-nginx |grep .elb.amazonaws.com| awk '{ print $3 }'
  register: ingress_elb_endpoint
  until: ingress_elb_endpoint.stdout.find(".elb.amazonaws.com") != -1
  retries: 6
  delay: 10

- name: Create ingress DNS record
  route53:
    state: present
    zone: "{{ route53_zone }}"
    record: "*.{{ base_domain }}"
    type: CNAME
    value: "{{ ingress_elb_endpoint.stdout }}"
    overwrite: true

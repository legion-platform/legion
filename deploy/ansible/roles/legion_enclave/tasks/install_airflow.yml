---

- name: Get airflow chart status
  shell: helm --kube-context {{ cluster_name }} ls --all airflow-{{ enclave }}
  register: airflow_deployment_status

- set_fact:
    airflow_deployed: "{{ airflow_deployment_status.stdout_lines|length > 1 }}"

- name: Remove airflow chart
  shell: helm --kube-context {{ cluster_name }} delete --purge airflow-{{ enclave }}
  when: airflow_deployed

- name: WORKAROUND delete pods in phase terminating
  shell: kubectl --context {{ cluster_name }} delete --grace-period=0 --force po $(kubectl --context {{ cluster_name }} get po -o wide | grep Terminating | awk '{ print $1 }') || true
  when: airflow_deployed

- name: Generate fernet key
  command: python -c 'from cryptography.fernet import Fernet; FERNET_KEY = Fernet.generate_key().decode(); print(FERNET_KEY)'
  register: fernet_key_output

- name: Generate flask key
  command: python -c 'import os, binascii; print(binascii.b2a_hex(os.urandom(60))[:32])'
  register: flask_key_output

- name: Get Airflow Postgres RDS endpoint
  rds:
    command: facts
    region: "{{ aws_region }}"
    instance_name: "{{ env_name }}-airflow-rds"
  register: airflow_rds_instance_facts

- name: Create airflow configuration (values) file
  template:
    src: airflow-values.yaml.j2
    dest: "{{ tmp_dir }}/airflow-values.{{ cluster_name }}.yaml"
    mode: 0644
  vars:
    secret_fernet_key: "{{ fernet_key_output.stdout }}"
    secret_flask: "{{ flask_key_output.stdout }}"

- name: Pre run with dumping
  shell: helm --kube-context {{ cluster_name }} install airflow --name airflow-{{ enclave }} --namespace {{ enclave }} --debug --dry-run -f  {{ tmp_dir }}/airflow-values.{{ cluster_name }}.yaml
  register: helm_airflow_install_output
  args:
    chdir: ../helms

- name: Save pre run result
  copy:
    content: "{{ helm_airflow_install_output.stdout }}"
    dest: "{{ tmp_dir }}/helm.airflow.{{ cluster_name }}.debug"

- name: Install airflow chart
  shell: helm --kube-context {{ cluster_name }} install airflow --name airflow-{{ enclave }} --namespace {{ enclave }} --wait --timeout 600 -f  {{ tmp_dir }}/airflow-values.{{ cluster_name }}.yaml
  args:
    chdir: ../helms

- name: Dump current HELM status
  shell: helm --kube-context {{ cluster_name }} status airflow-{{ enclave }}
  register: helm_airflow_status_output

- name: Save HELM status localy
  local_action:
    module: copy
    content: "{{ helm_airflow_status_output.stdout }}"
    dest: "{{ tmp_dir }}/helm.airflow.{{ cluster_name }}.status"

- name: "Make sure Airflow started successfully"
  shell: "curl -LsI https://airflow-{{ enclave }}.{{ cluster_name }}/admin/rest_api/api?api=version"
  register: airflow_check
  until: airflow_check.stdout.find('200') != -1
  retries: 60
  delay: 10

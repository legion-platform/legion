---

- name: Airflow RDS Security Group
  ec2_group:
    name: "{{env_name}}-airflow-rds-sg"
    description: "Airflow RDS SG"
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    tags:
      vendor: "{{ vendor }}"
      env_name: "{{ env_name }}"
      KubernetesCluster: "{{ cluster_name }}"
    rules:
      - proto: tcp
        from_port: 5432
        to_port: 5432
        group_id: "{{ workers_sg_facts.security_groups|map(attribute='group_id')|list }}"
      - proto: tcp
        from_port: 5432
        to_port: 5432
        group_id: "{{ jenkins_cc_sg }}"
    rules_egress:
      - proto: tcp
        from_port: 0
        to_port: 65535
        cidr_ip: "{{ private_network }}.0.0/16"

- name: Get Airflow RDS SG
  ec2_group_facts:
    region: "{{ aws_region }}"
    filters: 
      group_name: "{{env_name}}-airflow-rds-sg"
  register: airflow_rds_sg_facts

- name: Create Airflow RDS subnet group
  rds_subnet_group:
    name: "{{env_name}}-airflow-rds-subnets"
    state: present
    region: "{{ aws_region }}"
    description: Airflow RDS Subnet Group
    subnets: "{{ subnet_facts.results|map(attribute='subnets.0.id')|list }}"
  register: airflow_rds_subnet_group

- name: Create Airflow Postgres RDS instance
  rds:
    command: create
    instance_name: "{{ env_name }}-airflow-rds"
    db_engine: "postgres"
    region: "{{ aws_region }}"
    size: "{{ airflow_rds_size }}"
    subnet: "{{env_name}}-airflow-rds-subnets"
    vpc_security_groups: "{{ airflow_rds_sg_facts.security_groups.0.group_id }}"
    instance_type: "{{ airflow_rds_shape }}"
    username: "{{ aws.rds.username }}"
    password: "{{ aws.rds.password }}"
    db_name: "{{ aws.rds.database_name }}"
    wait: yes
    wait_timeout: 900
    tags:
      vendor: "{{ vendor }}"
      env_name: "{{ env_name }}"
      KubernetesCluster: "{{ cluster_name }}"
  register: airflow_rds_instance

- debug: 
   msg: "Airflow RDS Endpoint: {{ airflow_rds_instance.instance.endpoint }}"

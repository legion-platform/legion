---

- name: Configure kubectl using kops
  shell: "kops export kubecfg --name {{ cluster_name }} --state {{ state_store }}"

- name: Remove legion core chart
  shell: payloads/helm_delete_by_chart_name legion-core
  ignore_errors: true

- name: Copy git deploy key to host
  copy:
    src: "{{ git_key }}"
    dest: git.deploy
    owner: "{{ deploy_key_owner }}"
    group: "{{ deploys_key_group }}"

- name: WORKAROUND delete pods in phase terminating
  shell: kubectl delete --grace-period=0 --force po $(kubectl get po -o wide | grep Terminating | awk '{ print $1 }') || true

- name: Remove old GIT secret
  shell: kubectl delete secret legion-git-deploy  --ignore-not-found=true

- name: Create GIT secret
  shell: kubectl create secret generic legion-git-deploy --from-file=id_rsa=git.deploy

- name: Remove old AWS S3 credentials secret
  shell: kubectl delete secret legion-aws-s3-credentials --ignore-not-found=true

- name: Create AWS S3 credentials secret
  command: "kubectl create secret generic legion-aws-s3-credentials --from-literal=AWS_ACCESS_KEY_ID={{ (airflow|json_query('connections[?connection_id==`s3_conn`].extra.aws_access_key_id')).0 }} --from-literal=AWS_SECRET_ACCESS_KEY={{ (airflow|json_query('connections[?connection_id==`s3_conn`].extra.aws_secret_access_key')).0 }}"

- name: Create legion configuration (values) file
  template:
    src: legion-core-values.yaml.j2
    dest: ~/legion-core-values.yaml
    mode: 0644
  vars:
    git_secret_name: legion-git-deploy

- name: Pre run with dumping
  shell: helm install legion-core --name legion-core --debug --dry-run -f  ~/legion-core-values.yaml
  register: helm_core_install_output
  args:
    chdir: ../helms

- name: Save pre run result
  copy:
    content: "{{ helm_core_install_output.stdout }}"
    dest: ./helm.core.debug

- name: Install legion core chart
  shell: helm install legion-core --name legion-core --wait --timeout 600 -f  ~/legion-core-values.yaml
  args:
    chdir: ../helms

- name: Run HELM status checker
  shell: payloads/examine_helm_deployed legion-core

- name: Dump current HELM status
  shell: helm status legion-core
  register: helm_core_status_output

- name: Save HELM status localy
  local_action:
    module: copy
    content: "{{ helm_core_status_output.stdout }}"
    dest: ./helm.core.status

---

- name: Configure kubectl using kops
  shell: "kops export kubecfg --name {{ cluster_name }} --state {{ state_store }}"

- name: Get airflow chart status
  shell: helm ls --all airflow
  register: airflow_deployment_status

- set_fact:
    airflow_deployed: "{{ airflow_deployment_status.stdout_lines|length > 1 }}"

- name: Remove airflow chart
  shell: helm delete --purge airflow
  when: airflow_deployed

- name: WORKAROUND delete pods in phase terminating
  shell: kubectl delete --grace-period=0 --force po $(kubectl get po -o wide | grep Terminating | awk '{ print $1 }') || true

- name: Remove legion core chart
  shell: payloads/helm_delete_by_chart_name airflow
  ignore_errors: true

- name: Generate fernet key
  command: python -c 'from cryptography.fernet import Fernet; FERNET_KEY = Fernet.generate_key().decode(); print(FERNET_KEY)'
  register: fernet_key_output

- name: Generate flask key
  command: python -c 'import os, binascii; print(binascii.b2a_hex(os.urandom(60))[:32])'
  register: flask_key_output

- name: Create airflow configuration (values) file
  template:
    src: airflow-values.yaml.j2
    dest: ~/airflow-values.yaml
    mode: 0644
  vars:
    secret_fernet_key: "{{ fernet_key_output.stdout }}"
    secret_flask: "{{ flask_key_output.stdout }}"

- name: Pre run with dumping
  shell: helm install airflow --name airflow --debug --dry-run -f  ~/airflow-values.yaml
  register: helm_airflow_install_output
  args:
    chdir: ../helms

- name: Save pre run result
  copy:
    content: "{{ helm_airflow_install_output.stdout }}"
    dest: ./helm.airflow.debug

- name: Install airflow chart
  shell: helm install airflow --name airflow --wait --timeout 600 -f  ~/airflow-values.yaml
  args:
    chdir: ../helms

- name: Dump current HELM status
  shell: helm status airflow
  register: helm_airflow_status_output

- name: Save HELM status localy
  local_action:
    module: copy
    content: "{{ helm_airflow_status_output.stdout }}"
    dest: ./helm.airflow.status

#!/usr/bin/env python3
#
#    Copyright 2017 EPAM Systems
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#

"""
k8s-template application is a replacement of consul-template app.
It can generate config files based on K8s API response and execute a reload command.
"""

import sys
import os
import argparse
import logging
import time
from jinja2 import Environment, FileSystemLoader
import kubernetes
import kubernetes.client
import kubernetes.client.models
import kubernetes.config
import kubernetes.config.config_exception
import urllib3
import urllib3.exceptions

ROOT_LOGGER = logging.getLogger()


def build_client():
    """
    Configure and returns kubernetes client

    :return: :py:module:`kubernetes.client`
    """
    try:
        kubernetes.config.load_incluster_config()
    except kubernetes.config.config_exception.ConfigException:
        kubernetes.config.load_kube_config()

    # Disable SSL warning for self-signed certificates
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    return kubernetes.client.ApiClient()


def find_all_services(component=''):
    """
    Find all services details
    :type component: filter by specified component value, or none for all
    :return: list[V1Service]
    """
    client = build_client()

    namespace = os.environ.get('NAMESPACE', '')

    core_api = kubernetes.client.CoreV1Api(client)
    if namespace:
        all_services = core_api.list_namespaced_service(namespace)
    else:
        raise ValueError("NAMESPACE wasn't found in env var.")

    type_label_name = 'legion.component'
    if component:
        filtered_services = [
            service
            for service in all_services.items
            if service.metadata.labels.get(type_label_name) == component
        ]
    else:
        filtered_services = all_services.items

    return filtered_services


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='K8S Template Renderer')
    parser.add_argument('--verbose', "-v", help='verbose log output',
                        action='store_true')

    parser.add_argument('--template', '-t', type=str, help='Template file path', required=True)
    parser.add_argument('--output', '-o', type=str, help='Output file path', required=True)
    parser.add_argument('--command', '-c', type=str, default='',
                        help='Command to reload configuration', required=False)
    parser.add_argument('--once', '-n', action='store_true',
                        help='Render template Once', required=False)
    parser.add_argument('--pause', '-p', help='Pause length, in seconds', type=int,
                        default=5, required=False)

    # --------- END OF SECTIONS -----------
    args = parser.parse_args(sys.argv[1:])

    v = vars(args)

    if args.verbose or os.getenv('VERBOSE', ''):
        log_level = logging.DEBUG
    else:
        log_level = logging.ERROR

    ROOT_LOGGER.setLevel(log_level)

    j2_env = Environment(
        loader=FileSystemLoader([os.getcwd(), os.path.dirname(os.path.abspath(__file__))])
    )

    j2_template = j2_env.get_template(args.template)

    while True:
        values = find_all_services()
        with open(args.output, 'w') as output_file:
            logging.debug('Output file path: %s' % output_file.name)
            output_file.write(j2_template.render({'services': values}))

        if args.command:
            os.system(args.command)

        if args.once:
            break
        else:
            time.sleep(args.pause)
